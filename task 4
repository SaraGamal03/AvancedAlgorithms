import java.util.*;

public class CPUScheduler {
    private PriorityQueue<Job> queue;

    public CPUScheduler() {
        queue = new PriorityQueue<>();
    }

    public void addJob(Job job) {
        queue.offer(job);
    }

    public void runJobs() {
        while (!queue.isEmpty()) {
            Job job = queue.poll();
            System.out.println("Running job: " + job);
            job.run();
            if (!job.isCompleted()) {
                queue.offer(job);
            } else {
                System.out.println("Job completed: " + job);
            }
        }
    }

    public static void main(String[] args) {
        CPUScheduler scheduler = new CPUScheduler();
        scheduler.addJob(new Job(1, 5));
        scheduler.addJob(new Job(5, 3));
        scheduler.addJob(new Job(10, 7));
        scheduler.runJobs();
    }
}

class Job implements Comparable<Job> {
    private int priority;
    private int duration;
    private int remainingTime;

    public Job(int priority, int duration) {
        this.priority = priority;
        this.duration = duration;
        this.remainingTime = duration;
    }

    public int getPriority() {
        return priority;
    }

    public int getDuration() {
        return duration;
    }

    public void run() {
        remainingTime--;
    }

    public boolean isCompleted() {
        return remainingTime == 0;
    }

    @Override
    public int compareTo(Job other) {
        return Integer.compare(other.priority, this.priority);
    }

    @Override
    public String toString() {
        return "Job(priority=" + priority + ", duration=" + duration + ")";
    }
}
